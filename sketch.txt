data ClaimcaseAction (lc :: Locale) :: Action
= ClaimcaseAction (lc :: Locale) :: ParamPart -> Type -> Type -> Type

data ParamPart = ParamName | ParamType

handleClaimcaseAction :: ... -> ActionHandler (ClaimModel lc) (ClaimEvent lc) m (ClaimcaseAction lc)

type ActionHandler model event m c =
  forall method a. c 'ParamType method a -> HandlerType method model event m a

P x "claimcaseKey" ClaimcaseKey -> ClaimcaseAction lc x Query (ClaimcaseOut lc)
x := ParamType
ClaimcaseKey -> ClaimcaseAction lc x Query (ClaimcaseOut lc)

type Query = RequestType 'Direct '[JSON] (Verb 'GET 200 '[JSON])

data HandlerType method model event m a where
  Query :: (CanMutate method ~ 'False, GetModelAccess method ~ 'Direct)
    => (model -> m a) -> HandlerType method model event m a

mode :- API,   mode := AsServerT Handler   --->   ServerT API Handler

data Cmd action b

data ClaimcaseAction p lc mode = ClaimcaseAction {
  get :: mode :- "ClaimcaseGet" :> QueryParam "claimcaseKey" ClaimcaseKey :> Cmd p (ClaimcaseOut lc)
  }

ClaimcaseAction p lc AsApi = ClaimcaseAction {
  get :: "ClaimcaseGet" :> QueryParam "claimcaseKey" ClaimcaseKey :> Cmd p (ClaimcaseOut lc)
  }

ClaimcaseAction p lc (AsServerT m) = ClaimcaseAction {
  get :: ServerT
             ("ClaimcaseGet" :> QueryParam "claimcaseKey" ClaimcaseKey :> Cmd p (ClaimcaseOut lc))
             m
-- == ClaimcaseKey -> Model p -> m (Model p -> ClaimcaseOut lc, [Event p])
  }
-- ==
ClaimcaseAction p lc (AsServerT m) = ClaimcaseAction {
  get :: ServerT
             (QueryParam "claimcaseKey" ClaimcaseKey :> Cmd p (ClaimcaseOut lc))
             m
  }

only need to change api type! rest follows

type family Model action where
  Model (ClaimcaseAction lc mode) = ClaimModel lc

type family Event action where
  Event (ClaimcaseAction lc mode) = ClaimEvent lc

instance HasServer (Cmd action b) where
  type ServerT (Cmd action b) m = Model action -> m ([Event action], b)
  route = -- this is where the magic happens. todo!

-- genericServe turns a record into a sequence of :<|> choices
instance (GServantProduct l, GServantProduct r) => GServantProduct (l :*: r) where
    type GToServant (l :*: r) = GToServant l :<|> GToServant r
    gtoServant   (l :*: r)  = gtoServant l :<|> gtoServant r
    gfromServant (l :<|> r) = gfromServant l :*: gfromServant r
-- -> can get per-constructor routes easily by doing our own genericServer
