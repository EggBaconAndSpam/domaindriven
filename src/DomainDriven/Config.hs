{-# LANGUAGE TemplateHaskell #-}

module DomainDriven.Config
    ( module DomainDriven.Config
    , HasParamName(..)
    , Name
    ) where

import           Data.Char                      ( isLower )
import qualified Data.List                                    as L
import qualified Data.Map                                     as M
import           Data.Maybe
import           Data.Text                      ( Text )
import           DomainDriven.Internal.Class
import           DomainDriven.Internal.HasParamName
import           GHC.Generics                   ( Generic )
import           Language.Haskell.TH
import           Prelude
import           System.IO.Unsafe


-- | Configuration used to generate server
-- This is expected to be generated by `mkServerConfig`. It is only explicit due to
-- the GHC stage restrictions.
data ServerConfig = ServerConfig
    { allApiOptions :: M.Map String ApiOptions
        -- ^ Map of API options for all action GADTs used in the API
    , allParamNames :: M.Map String Text
        -- ^ Map of param names for all types translated into Servant `QueryParam`s
    }
    deriving (Show, Generic)

defaultServerConfig :: ServerConfig
defaultServerConfig = ServerConfig M.empty M.empty

-- | Generate a server configuration and give it the specified name
-- Note that everything that relies on a HasParamName or HasFieldName instance must be
-- visible from where this is run.
mkServerConfig :: String -> Q [Dec]
mkServerConfig (mkName -> cfgName) = do
    sig'  <- sigD cfgName (conT ''ServerConfig)
    body' <-
        [d| $(varP cfgName) = ServerConfig $(getApiOptionsMap) $(getParamNameMap) |]
    pure $ sig' : body'

-- | Generates `Map String ApiOptions`
-- Containing the ApiOptions of all types with an ApiOpts instance
getApiOptionsMap :: Q Exp
getApiOptionsMap = reify ''HasApiOptions >>= \case
    ClassI _ instances -> do
        cfgs <- traverse nameAndCfg instances

        [e| M.fromList  $(pure $ ListE cfgs) |]
    i -> fail $ "Expected ClassI but got: " <> show i
  where
    nameAndCfg :: Dec -> Q Exp
    nameAndCfg = \case
        InstanceD _ _ (AppT _ ty@(ConT n)) _ ->
             [e| ( $(stringE $ nameBase n), apiOptions @($(pure ty)))|]
        d -> fail $ "Expected instance InstanceD but got: " <> show d


-- | Generates `Map String Text`
getParamNameMap :: Q Exp
getParamNameMap = reify ''HasParamName >>= \case
    ClassI _ instances -> do
        cfgs <- catMaybes <$> traverse typeAndParamName instances
        [e| M.fromList $(pure $ ListE cfgs) |]
    i -> fail $ "Expected ClassI but got: " <> show i
  where
    typeAndParamName :: Dec -> Q (Maybe Exp)
    typeAndParamName = \case
        InstanceD _ _ (AppT _ ty@(ConT n)) _ ->
            Just <$> [e| ($(stringE $ nameBase n), paramName @($(pure ty)))|]
        InstanceD _ _ ty _ -> do
            seq (unsafePerformIO (putStrLn $ "PROBLEM: " <> show ty)) (pure ())
            pure Nothing
        InstanceD _ _ _ _ -> pure Nothing
        d                 -> fail $ "Expected instance InstanceD but got: " <> show d

------------------------------------------------------------------------------------------
-- Some utility functions that can be useful when remapping names
------------------------------------------------------------------------------------------
dropPrefix :: String -> String -> String
dropPrefix pre s = if pre `L.isPrefixOf` s then drop (length pre) s else s

dropSuffix :: String -> String -> String
dropSuffix pre s = if pre `L.isSuffixOf` s then take (length s - length pre) s else s

dropFirstWord :: String -> String
dropFirstWord = L.dropWhile isLower . drop 1
